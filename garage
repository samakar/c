// ----- Class Timer -----

class TimerObj {
    public:
         void init(int duration)    {_duration = duration;}
         void turnOn()  { _doneTime = millis() + _duration; _off = false; }
         void turnOff() { _doneTime = 0; _off = true; }
         bool isDone()  { return (millis() >= _doneTime); }
         bool isOff()   {return _off;}
    private:
         int _duration=0; //ms
         unsigned long _doneTime;
         bool _off = true;
};

// ----- Class Http -----

class HttpObj {
    public:
         void init(int duration);
         void get(char * const hostname, String  path);
         char * extractJSON(char * chars);
         void run();
    private:
        void _sendRequest();
        char * _request();
        char * _hostname;
        String  _path;
        static const int _maxBuffer = 1024;
        const char * _success = "\"result\":\"pass\"";
        TCPClient _client;
        char _buffer[_maxBuffer];
        char _part[_maxBuffer];
        TimerObj _timer;
};

void HttpObj::init(int duration){
   _timer.init(duration);
};

void HttpObj::get(char * const hostname, String path) {
    _hostname = hostname;
    _path = path;
    _sendRequest();
};

char * HttpObj::_request() {
  Serial.println("resolving host...");
  if (_client.connected()) {
         Serial.println("connected still!");
  }else {
      if (_client.connect(_hostname, 80)) {
        Serial.println("connected!");
      } else {
        Serial.println("\r\n\r\nConnection Failed!");
        _client.stop();
        return NULL;
      }
  }
  
    Serial.println(_path);
    _client.print("GET ");
    _client.print(_path);
    _client.print(" HTTP/1.1\r\n");
    _client.print("HOST: ");
    _client.println(_hostname);
    _client.print("\r\n\r\n\r\n");

  Serial.println("\r\nReading Data......");
  _buffer[0] = '\0'; // empty buffer
  bool breakFlag = false;
  int i,k = 0;
  uint32_t lastRead = millis();
  while ((millis() - lastRead) < 1000) {
    while (_client.available()) {
      char c = _client.read();
      Serial.print(c);
      if (c=='}') {
          Serial.println("\r\n } detected");
          // protocol: json response doesn't contain an array
          breakFlag = true;
      }
      if(i++ > 100) {
        delay(100);
        i = 0;
      }
      if (c == -1) break;
  	  _buffer[k++] = c;
  	  if(k == _maxBuffer-1) {
        _client.flush();
      }
      lastRead = millis();
    }
    if (breakFlag) break;
  }
  Serial.println("\r\nData Read......");
  _client.flush();
  return _buffer;
};

char * HttpObj::extractJSON(char * chars) {
    char *ptrStrf;
    char *ptrStrl;
    ptrStrf = strstr(chars, "{");    
    ptrStrl =strstr(chars,"}");
    if (ptrStrf != NULL && ptrStrl != NULL){
        // if successfull then show what is between {}
        int len = ptrStrl-ptrStrf+1;
        memcpy(_part, ptrStrf, len);
        _part[len] = 0; /* Add terminator */   
        return _part;
    }else {
        return NULL;
    }
}

void HttpObj::_sendRequest(){
    char * response = _request();
    char * reply = extractJSON(response);
    Serial.println(reply);
    if ( strstr(reply, _success) == NULL) {
        // stop client because sometimes _client.connected() is true but connection is lost.
        _client.stop();
        _timer.turnOn();
    } else 
        _timer.turnOff();
};

void HttpObj::run() {
   if (!_timer.isOff()) {
    if (_timer.isDone()) _sendRequest();
   }
};
// ----- Base Class -----

class baseObj {
  public:
    virtual String getState();
 };

// ----- Class LightSensor -----

class LightSensorObj: public baseObj {
    public:
        LightSensorObj();
        bool humanDetected();
        String getState();
    private:
        int _pirPin = D7;
        int _ldmPin = A7;
        int _ledPin = A6;
};

LightSensorObj::LightSensorObj() {
     pinMode(_pirPin, INPUT_PULLUP);
     pinMode(_ldmPin, INPUT_PULLDOWN);
     pinMode(_ledPin, OUTPUT);
     digitalWrite(_ledPin,LOW);
}

bool LightSensorObj::humanDetected() {
    if (digitalRead(_pirPin)==HIGH) {
        digitalWrite(_ledPin,HIGH);
        return true;
    }else {
        digitalWrite(_ledPin,LOW);
        return false;
    }
}

String LightSensorObj::getState() {
    char state[128];
    sprintf(state,"{\"name\":\"light\",\"pir\":%u}", digitalRead(_pirPin));
    String strState(state);
    return strState;
}

// ----- Class push-button -----

class PushButtonObj: public baseObj {
    public:
        void init(int);
        bool isPushed();
        String getState();
    protected:
        int _inputPin;
};

void PushButtonObj::init(int inputPin) {
    _inputPin = inputPin;
    pinMode(_inputPin, INPUT);
}

bool PushButtonObj::isPushed() {
    return (digitalRead(_inputPin)==HIGH);
}

String PushButtonObj::getState() {
    char state[128];
    sprintf(state,"{\"name\":\"pushBtn\",\"btn\":%u}", digitalRead(_inputPin));
    String strState(state);
    return strState;
}


// ----- Class Relay -----

class RelayObj {
    public:
        void init(int, int);
        void activate();
        void deactivate();
        int state();
    protected:
        int _outputPin;
        int _outputState;
        TimerObj _delayTimer;
};

void RelayObj::init(int outputPin, int offDelay) {
    _outputPin = outputPin;
    pinMode(_outputPin, OUTPUT);
    digitalWrite(_outputPin,LOW);
    _outputState = LOW;
    _delayTimer.init(offDelay);
}

void RelayObj::activate() {
    digitalWrite(_outputPin,HIGH);
    _outputState = HIGH;
    _delayTimer.turnOff();
}

void RelayObj::deactivate() {
    if (_delayTimer.isOff()) {
        _delayTimer.turnOn();
    } else if (_delayTimer.isDone()) {
        digitalWrite(_outputPin, LOW);
        _outputState = LOW;
        _delayTimer.turnOff();
    }
}

int RelayObj::state() {
    return _outputState;
}
// ----- Class PowerWall -----

class PowerWallObj: public baseObj {
    public:
        void init();
        RelayObj relayShort;
        RelayObj relayPower;
        String getState();
};

void PowerWallObj::init() {
    relayPower.init(D3, 20000);
    relayShort.init(A3, 200);
}

String PowerWallObj::getState() {
    char state[128];
    sprintf(state,"{\"name\":\"powerWal\",\"relaySht\":%u,\"relayPwr\":%u}", relayShort.state(), relayPower.state() );
    String strState(state);
    return strState;
}

// ----- Class Controller -----

class ControllerObj: public baseObj {
    public:
        void init();
        void run();
        int clickRelayDoor(String);
    protected:
        String getState();
        String bsonDate(int now);
        void publishState();
        LightSensorObj _lightSensor;
        PushButtonObj _pushButton;
        PowerWallObj _powerWall;
        HttpObj _http;
};

void ControllerObj::init() {
    _powerWall.init();
    _pushButton.init(D0);
    _http.init(1000);
    // publish state to enable control btns on user UI
    publishState();
}


void ControllerObj::run() {
    if (_lightSensor.humanDetected()) {
        _powerWall.relayPower.activate();
    }else {
        _powerWall.relayPower.deactivate();
    }

    if (_pushButton.isPushed()) {
        _powerWall.relayShort.activate();
    }else {
        _powerWall.relayShort.deactivate();
    }
    publishState();
    _http.run();
}

void ControllerObj::publishState() {
    // check state change
    static String lastState;
    String state = getState();
    if (state != lastState) {
        lastState = state;
        String eventMessage = "{\"deviceID\":\"" + Spark.deviceID() + "\",\"date\":" + bsonDate(Time.now()) + ",\"blocks\":" + state + "}";
        //publish state
        eventMessage = "/api?state=" + eventMessage;
        _http.get("www.hello-169940.usw1-2.nitrousbox.com", eventMessage);
    }
}

String ControllerObj::getState() {
    return "[" + _lightSensor.getState() + "," + _pushButton.getState() + "," + _powerWall.getState() + "]";
}


String ControllerObj::bsonDate(int now) {
    static unsigned long lastMillis;
    static int lastNow;
    int milli = (millis()-lastMillis) - (now-lastNow)*1000;
    if (milli>1000) milli = milli % 1000;
    if (milli<0) milli=0;
    lastMillis = milli;
    lastNow = now;
    // make BSON date
    char date[22];
    if (milli>99) sprintf(date,"%u%u", now, milli);
    else if (milli>9) sprintf(date,"%u0%u", now, milli);
    else sprintf(date,"%u00%u", now, milli);
    
    String strDate(date);
    return strDate;
}

int ControllerObj::clickRelayDoor(String command) {
   int state = 0;
   // find out the state of the led
   if(command == "HIGH") state = 1;
   else if(command == "LOW") state = 0;
   else return -1;

   // write to the appropriate pin
        _powerWall.relayShort.activate(); 
        _powerWall.relayShort.deactivate();
    return 200;
}
// ----------


ControllerObj controller;

int clickRelayDoor(String command){
    return controller.clickRelayDoor(command);
}

void setup() {
    Serial.begin(115200);
    while (!Serial.available());
    controller.init();
    Spark.function("pinControl", clickRelayDoor);
    //    Spark.variable("temperature", &lightSensor.qqqq, STRING);
 }

void loop() {
    controller.run();
}
